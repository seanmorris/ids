#!/usr/bin/env php
<?php
use \SeanMorris\Ids\Path;
use \SeanMorris\Ids\Router;
use \SeanMorris\Ids\Idilic\Route\RootRoute;

const IDILIC_PASSTHRU_CODE = '# idilic-passthru';

array_shift($argv);

if(file_exists($subidilicFile = getcwd() . '/idilic'))
{
	$subidilicFile = realpath($subidilicFile);
	$env = getenv();

	if(!isset($env['IDS_INSIDE_DOCKER']))
	{
		$line = trim(fgets(fopen($subidilicFile, 'r')));

		if(substr($line, -strlen(IDILIC_PASSTHRU_CODE)) === IDILIC_PASSTHRU_CODE)
		{
			fwrite(STDERR, sprintf(
				'Handing off to Docker (%s)...'
				, dirname($subidilicFile)
			));

			$subidilic = 'bash -c ' . escapeshellarg(
				escapeshellcmd($subidilicFile)
				. ' '
				. implode(' ', array_map('escapeshellarg', $argv))
			);

			passthru($subidilic, $exitCode);

			exit($exitCode);
		}
	}
}

$requestProto = new stdClass;
$requests     = [];
$requests[]   =& $requestProto;

$requestProto->args     = $args     = [];
$requestProto->switches = $switches = [];

$input = [];

if($argv)
{
	$input = $argv;
}
else
{
	// while($line = fgets(STDIN))
	// {
	// 	$line    = trim($line);
	// 	if(!$line)
	// 	{
	// 		continue;
	// 	}
	// 	$input[] = trim($line);
	// 	$input[] = '---';
	// }
}

foreach($input as $arg)
{
	if(preg_match('/^---$/', $arg))
	{
		if(!$args)
		{
			//continue;
		}

		$requestProto->args     = $args;
		$requestProto->switches = $switches;
		$args     = [];
		$switches = [];

		$requests[]   = new stdClass;
		$requestProto =& $requests[count($requests) - 1];

		continue;
	}

	if(!preg_match('/^(-+?)(\w+)\s?=?\s?(\S+)?$/', $arg, $match))
	{
		$args[] = $arg;
	}
	else
	{
		$type = $match[1];
		$switch = $match[2];
		$value = isset($match[3])
			? $match[3]
			: TRUE;

		$switches[$switch] = $value;
	}

	$requestProto->args     = $args;
	$requestProto->switches = $switches;
}

$composer = require dirname(__FILE__) . '/../init.php';

$_SERVER['HTTP_HOST'] = $_SERVER['HTTP_HOST'] ?? \SeanMorris\Ids\Settings::read('default', 'domain');

if(isset($switches['d']))
{
	$_SERVER['HTTP_HOST'] = $switches['d'];
}

if(isset($switches['domain']))
{
	$_SERVER['HTTP_HOST'] = $switches['domain'];
}

foreach($requests as $req)
{
	$request = new \SeanMorris\Ids\Request([
		'switches' => $req->switches ?? NULL
		, 'path'   => $path = new Path(...$req->args ?? [])
	]);

	$routes = new RootRoute;
	$router = new Router($request, $routes);
	$res = $router->route();

	ini_set("memory_limit", "-1");
	set_time_limit(0);

	if(!is_scalar($res) && $res !== null)
	{
		$outputArgs = [];

		switch($switches['format'] ?? NULL)
		{
			case 'pj':
			case 'pretty-json':
				$outputArgs = [JSON_PRETTY_PRINT];

			case 'j':
			case 'json':
				$outputFunc = 'json_encode';
				break;

			case 'py':
			case 'pretty-yml':
				$outputFunc = function($r){
					return yaml_emit(json_decode(
						json_encode($r), JSON_OBJECT_AS_ARRAY
					));
				};
				break;

			case 'y':
			case 'yml':
				$outputFunc = 'yaml_emit';
				break;

			default:
				function_exists('yaml_emit')
					? $outputFunc = 'yaml_emit'
					: $outputFunc = 'json_encode';
				break;
		}

		if(is_object($res) && method_exists($res, 'dumpStruct'))
		{
			$res = $res->dumpStruct();
		}

		if($res instanceof \Generator)
		{
			foreach($res as $r)
			{
				print $outputFunc($r, ...$outputArgs) . PHP_EOL;
			}
		}
		else
		{
			print $outputFunc($res, ...$outputArgs);
		}
	}
	else
	{
		print $res;
	}

	print PHP_EOL;
}
